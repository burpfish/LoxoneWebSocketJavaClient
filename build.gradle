group 'org.chelmer'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.fasterxml.jackson.core:jackson-core:2.8.6'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.8.6'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.6'
    compile 'com.fasterxml.jackson.module:jackson-module-parameter-names:2.8.6'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.8.6'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.6'
//    compile 'net.straylightlabs:hola:0.2.2'
//    compile 'org.jmdns:jmdns:3.5.1'
    compile 'io.netty:netty-all:4.1.8.Final'

    compile 'commons-cli:commons-cli:1.3.1'

    compile 'org.slf4j:slf4j-api:1.7.23'
    compile 'org.slf4j:slf4j-simple:1.7.23'

    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-core:2.7.11'
}

//task fatjar(type: Jar) {
//     baseName = project.name + '-all'
//     into('lib') {
//         from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
//     }
//     with jar
//}
//task mockJar(type: Jar, dependsOn: classes) {
//    baseName = project.name + '-mock'
//    from sourceSets.test.resources {
//        include 'mock/**'
//    }
//    from sourceSets.main.output
//    // include 'mock/**'
//}


task copyLibs(type: Copy) {
    into 'build/dependencies'
    from { configurations.compile.collect { it } }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}


artifacts {
    archives sourcesJar
    archives javadocJar
//    archives mockJar
}